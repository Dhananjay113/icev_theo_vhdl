library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity PWMGenerator is
    Port ( clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           pwm_out : out STD_LOGIC;
           DUTY_CYCLE : in INTEGER range 0 to 100);
end PWMGenerator;

architecture Behavioral of PWMGenerator is
    signal counter : INTEGER range 0 to 100 := 0;
    signal pwm_internal : STD_LOGIC := '0';
begin
    process(clk, rst)
    begin
        if rst = '1' then
            counter <= 0;
            pwm_internal <= '0';
        elsif rising_edge(clk) then
            if counter < DUTY_CYCLE then
                pwm_internal <= '1';
            else
                pwm_internal <= '0';
            end if;

            counter <= counter + 1;
            if counter = 100 then
                counter <= 0;
            end if;
        end if;
    end process;

    pwm_out <= pwm_internal;
end Behavioral;
